Mat := Object clone
MatMult := Object clone
ProcessFile := Object clone
f := File with("Matrix.txt")
f openForReading

ProcessFile inList := f readLines
ProcessFile build := method(
   for(a, 0, (inList size) - 1,
      if(a == 0, 
         s := inList at(a) split
         if(s at(1) != s at(3), Exception raise("Can not Multiply"))
         Mat height = s at(0) asNumber
         Mat width = s at(4) asNumber
         buildMat2
         builddList
      )
      if(a > 0 and a < (Mat height) + 1,
         s := inList at(a) split
         tList := List clone
         for(b, 1, (s size - 2), 
            tList append(s at(b) asNumber)
         )
         Mat mat1 append(tList)
      )
      if(a > (Mat height) + 1, 
         s := inList at(a) split
         for(c, 1, (s size - 2),
            Mat mat2 at(c - 1) append(s at(c) asNumber)
         )
      )
   )
)
ProcessFile buildMat2 := method(
   x := List clone
   for(d, 1, Mat width,
      x append(List clone)
   )
   Mat mat2 = x
)
ProcessFile builddList := method(
   for(e, 1, Mat height,
      Mat dList append(List clone) 
      for(f, 1, Mat width,
         Mat dList at(e-1) append(f)
      )
   )
)

Mat height := 2
Mat width := 2
Mat mat1 := List clone
Mat mat2 := List clone
Mat dList := List clone
Mat placeAtd := method(h, w, v, dList atPut(h, dList at(h) atPut(w, v)))


MatMult getNum := method(alist, blist,
   x := 0;
   for(i, 1, alist size,
      x = x + ((alist at(i-1)) * (blist at(i-1)));
      x println;
    )
)
MatMult placeAt := method(h, w,
   wait(2) 
   v := getNum(Mat mat1 at(h), Mat mat2 at(w))
   Mat placeAtd(h, w, v)
)

ProcessFile build
Mat mat1 println
Mat mat2 println

for(i, 1, Mat height,
   for(b, 1, Mat width,
      nMatMult := MatMult clone
      nMatMult @placeAt(i-1, b-1);
      "starting" println
   )
)
while(Scheduler yieldingCoros size > 1, yield)
f close
Mat dList println
